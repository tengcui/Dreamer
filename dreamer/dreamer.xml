<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>dreamer</name>
  </assembly>
  <members>
    <member name="N:dreamer.AI">
    </member>
    <member name="T:dreamer.AI.BaseBehavior">
    </member>
    <member name="M:dreamer.AI.BaseBehavior.#ctor(System.TimeSpan,System.TimeSpan)">
      <param name="minTime_ChoseBehavior">
</param>
      <param name="maxTime_ChoseBehavior">
</param>
    </member>
    <member name="M:dreamer.AI.BaseBehavior.Update(System.TimeSpan)">
      <param name="gameTime">
</param>
    </member>
    <member name="T:dreamer.AI.ChaseBehavior">
    </member>
    <member name="M:dreamer.AI.ChaseBehavior.#ctor(System.TimeSpan,System.TimeSpan,dreamer.Person,dreamer.Monster,Microsoft.Xna.Framework.Content.ContentManager)">
      <summary>
Construct</summary>
      <param name="minTime_ChoseBehavior">
Min time to choose behavior</param>
      <param name="maxTime_ChoseBehavior">
Max time to choose behavior</param>
      <param name="ninja">
Target position</param>
      <param name="mySelf">
Current monster position</param>
      <param name="cm">
</param>
    </member>
    <member name="M:dreamer.AI.ChaseBehavior.Update(System.TimeSpan)">
      <param name="gameTime">
</param>
    </member>
    <member name="M:dreamer.AI.ChaseBehavior.LoadEffect">
    </member>
    <member name="N:dreamer">
    </member>
    <member name="T:dreamer.AnimatedTexture">
    </member>
    <member name="M:dreamer.AnimatedTexture.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D@,System.Int32,System.Int32,System.Int32)">
      <param name="gridIm">
the texture2D object that contains frames for the animation</param>
      <param name="frameCount">
number of frames in the texture2D</param>
      <param name="nrows">
</param>
      <param name="framesPerSec">
frame rate - fps</param>
    </member>
    <member name="M:dreamer.AnimatedTexture.ChangeCurrentFrame(System.Int32,System.Int32)">
      <summary>
Change the current frame of the animation to a certain frame on the gridImage</summary>
      <param name="rowNumber">
row number( starting with 0)</param>
      <param name="columnNumber">
column number (starting with 0)</param>
    </member>
    <member name="M:dreamer.AnimatedTexture.ChangeSpeedTo(System.Int32)">
      <summary>
change current speed of playing to new fps</summary>
      <param name="fps">
</param>
    </member>
    <member name="M:dreamer.AnimatedTexture.PlayOnce(System.Int32,System.Int32)">
      <param name="row">
</param>
      <param name="nFrames">
</param>
    </member>
    <member name="M:dreamer.AnimatedTexture.Update(Microsoft.Xna.Framework.GameTime)">
      <param name="gameTime">
</param>
    </member>
    <member name="P:dreamer.AnimatedTexture.IsPaused">
    </member>
    <member name="M:dreamer.AnimatedTexture.Reset">
    </member>
    <member name="M:dreamer.AnimatedTexture.Stop">
    </member>
    <member name="M:dreamer.AnimatedTexture.Play">
    </member>
    <member name="M:dreamer.AnimatedTexture.Pause">
    </member>
    <member name="T:dreamer.BaseSupport">
    </member>
    <member name="P:dreamer.BaseSupport.Instance">
    </member>
    <member name="P:dreamer.BaseSupport.gd">
    </member>
    <member name="P:dreamer.BaseSupport.Content">
    </member>
    <member name="P:dreamer.BaseSupport.sbc">
    </member>
    <member name="M:dreamer.BaseSupport.Initialize(Microsoft.Xna.Framework.GraphicsDeviceManager,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
      <summary>
Initialize</summary>
      <param name="_gd">
</param>
      <param name="content">
</param>
      <param name="_sbc">
</param>
    </member>
    <member name="T:dreamer.blood">
      <summary>
This is a game component that implements IUpdateable.</summary>
    </member>
    <member name="M:dreamer.blood.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D@,Microsoft.Xna.Framework.Graphics.SpriteBatch@)">
      <param name="game">
</param>
      <param name="pos">
</param>
      <param name="te">
</param>
      <param name="p1">
</param>
    </member>
    <member name="M:dreamer.blood.Initialize">
      <summary>
Allows the game component to perform any initialization it needs to before starting to run.  This is where it can query for any required services and load content.</summary>
    </member>
    <member name="M:dreamer.blood.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
Allows the game component to update itself.</summary>
      <param name="gameTime">
Provides a snapshot of timing values.</param>
    </member>
    <member name="M:dreamer.blood.Draw">
    </member>
    <member name="T:dreamer.Boss">
      <summary>
This is a game component that implements IUpdateable.</summary>
    </member>
    <member name="M:dreamer.Boss.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.SpriteBatch,dreamer.Person)">
      <param name="game">
</param>
      <param name="myTe">
</param>
      <param name="p1">
</param>
      <param name="per1">
</param>
    </member>
    <member name="M:dreamer.Boss.Initialize">
      <summary>
Allows the game component to perform any initialization it needs to before starting to run.  This is where it can query for any required services and load content.</summary>
    </member>
    <member name="M:dreamer.Boss.GoRandom">
    </member>
    <member name="M:dreamer.Boss.Chase(Microsoft.Xna.Framework.Vector2)">
      <param name="targetPos">
</param>
    </member>
    <member name="M:dreamer.Boss.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
Allows the game component to update itself.</summary>
      <param name="gameTime">
Provides a snapshot of timing values.</param>
    </member>
    <member name="M:dreamer.Boss.Draw">
    </member>
    <member name="T:dreamer.frmLogo">
    </member>
    <member name="M:dreamer.frmLogo.#ctor">
    </member>
    <member name="T:dreamer.Game_Main">
    </member>
    <member name="P:dreamer.Game_Main.PersonDirection">
    </member>
    <member name="M:dreamer.Game_Main.#ctor">
    </member>
    <member name="N:HelperDLL">
    </member>
    <member name="T:HelperDLL.RandomHelper">
      <summary>
Random helper</summary>
    </member>
    <member name="M:HelperDLL.RandomHelper.GenerateNewRandomGenerator">
      <summary>
Generate a new random generator with help of WindowsHelper.GetPerformanceCounter. Also used for all GetRandom methods here.</summary>
      <returns>
Random</returns>
    </member>
    <member name="M:HelperDLL.RandomHelper.GetRandomInt(System.Int32)">
      <summary>
Get random int</summary>
      <returns>
Int</returns>
      <param name="max">
Maximum</param>
    </member>
    <member name="M:HelperDLL.RandomHelper.GetRandomInt(System.Int32,System.Int32)">
      <param name="min">
</param>
      <param name="max">
</param>
    </member>
    <member name="M:HelperDLL.RandomHelper.GetRandomFloat(System.Single,System.Single)">
      <summary>
Get random float between min and max</summary>
      <returns>
Float</returns>
      <param name="min">
Min</param>
      <param name="max">
Max</param>
    </member>
    <member name="M:HelperDLL.RandomHelper.GetRandomDouble(System.Double,System.Double)">
      <param name="min">
</param>
      <param name="max">
</param>
    </member>
    <member name="M:HelperDLL.RandomHelper.GetRandomByte(System.Byte,System.Byte)">
      <summary>
Get random byte between min and max</summary>
      <returns>
Byte</returns>
      <param name="min">
Min</param>
      <param name="max">
Max</param>
    </member>
    <member name="N:dreamer.Level">
    </member>
    <member name="T:dreamer.Level.Attack">
    </member>
    <member name="M:dreamer.Level.Attack.IsEnableAttack">
      <summary>
Judge if can attack</summary>
      <returns>
If can attack</returns>
    </member>
    <member name="M:dreamer.Level.Attack.#ctor(System.TimeSpan)">
      <summary>
Construct</summary>
      <param name="minimumTimeToAttack">
Min attack timspan</param>
    </member>
    <member name="M:dreamer.Level.Attack.Update(System.TimeSpan)">
      <summary>
Update gametime</summary>
      <param name="gameTime">
</param>
    </member>
    <member name="T:dreamer.Level.FSMState">
    </member>
    <member name="P:dreamer.Level.FSMState.ID">
    </member>
    <member name="M:dreamer.Level.FSMState.AddTransition(dreamer.Level.Transition,dreamer.Level.StateID)">
      <param name="trans">
</param>
      <param name="id">
</param>
    </member>
    <member name="M:dreamer.Level.FSMState.DeleteTransition(dreamer.Level.Transition)">
      <param name="trans">
</param>
    </member>
    <member name="M:dreamer.Level.FSMState.GetOutputState(dreamer.Level.Transition)">
      <param name="trans">
</param>
    </member>
    <member name="M:dreamer.Level.FSMState.DoBeforeEntering">
    </member>
    <member name="M:dreamer.Level.FSMState.DoBeforeLeaving">
    </member>
    <member name="M:dreamer.Level.FSMState.Reason(dreamer.Person,dreamer.Person)">
      <param name="player">
</param>
      <param name="npc">
</param>
    </member>
    <member name="M:dreamer.Level.FSMState.Act(dreamer.Person,dreamer.Person)">
      <param name="player">
</param>
      <param name="npc">
</param>
    </member>
    <member name="T:dreamer.Level.FSMManager">
    </member>
    <member name="P:dreamer.Level.FSMManager.CurrentStateID">
    </member>
    <member name="P:dreamer.Level.FSMManager.CurrentState">
    </member>
    <member name="M:dreamer.Level.FSMManager.#ctor">
    </member>
    <member name="M:dreamer.Level.FSMManager.AddState(dreamer.Level.FSMState)">
      <param name="s">
</param>
    </member>
    <member name="M:dreamer.Level.FSMManager.DeleteState(dreamer.Level.StateID)">
      <param name="id">
</param>
    </member>
    <member name="M:dreamer.Level.FSMManager.PerformTransition(dreamer.Level.Transition)">
      <param name="trans">
</param>
    </member>
    <member name="T:dreamer.Level.MonsterManager">
    </member>
    <member name="P:dreamer.Level.MonsterManager.Monsters">
      <summary>
Monster List</summary>
    </member>
    <member name="P:dreamer.Level.MonsterManager.MonsterKilledNumber">
    </member>
    <member name="E:dreamer.Level.MonsterManager.OnAllMonstersDead">
      <summary>
All monsters have been killed, active this event</summary>
    </member>
    <member name="M:dreamer.Level.MonsterManager.#ctor(dreamer.Person)">
      <summary>
Construct</summary>
      <param name="ninja">
</param>
    </member>
    <member name="M:dreamer.Level.MonsterManager.Update(System.TimeSpan)">
      <param name="gameTime">
</param>
    </member>
    <member name="M:dreamer.Level.MonsterManager.MoveMonsterByBackground(System.Int32)">
      <summary>
Monster has to be move by background move</summary>
      <param name="distance">
The distance has to move</param>
    </member>
    <member name="M:dreamer.Level.MonsterManager.Draw">
    </member>
    <member name="T:dreamer.Level.Monsterstate">
    </member>
    <member name="M:dreamer.Level.Monsterstate.Reason(dreamer.Person,dreamer.Person)">
      <param name="player">
</param>
      <param name="npc">
</param>
    </member>
    <member name="M:dreamer.Level.Monsterstate.Act(dreamer.Person,dreamer.Person)">
      <param name="player">
</param>
      <param name="npc">
</param>
    </member>
    <member name="T:dreamer.Map">
    </member>
    <member name="M:dreamer.Map.SetMapTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
Set Map texture</summary>
      <param name="texture">
texture</param>
    </member>
    <member name="M:dreamer.Map.AddMap">
      <summary>
Increase the number of maps</summary>
    </member>
    <member name="M:dreamer.Map.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GraphicsDeviceManager)">
      <summary>
Draw Map</summary>
      <param name="sb">
Sprite Batch</param>
      <param name="gdm">
Graphics Device</param>
    </member>
    <member name="T:dreamer.Menu">
      <summary>
Menu class</summary>
    </member>
    <member name="M:dreamer.Menu.#ctor(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GraphicsDeviceManager,dreamer.MenuType)">
      <summary>
Constructor</summary>
      <param name="cm">
Content Manager</param>
      <param name="sp">
Sprite Batch</param>
      <param name="gdm">
Graphics Devices Manager</param>
      <param name="menuType">
Menu Type</param>
    </member>
    <member name="M:dreamer.Menu.MainMenuLoad">
      <summary>
Main menu load resource</summary>
    </member>
    <member name="M:dreamer.Menu.DrawMenu">
      <summary>
Draw Menu</summary>
    </member>
    <member name="M:dreamer.Menu.GetKeyboerdState(Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>
Get keyboard State</summary>
      <param name="keyboardState">
Current Keyboard State</param>
    </member>
    <member name="T:dreamer.Monster">
    </member>
    <member name="P:dreamer.Monster.MonsterBloodNum">
    </member>
    <member name="E:dreamer.Monster.OnMonsterDead">
      <summary>
Monster dead event</summary>
    </member>
    <member name="M:dreamer.Monster.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
Constructor</summary>
      <param name="gd">
</param>
      <param name="content">
</param>
      <param name="spriteBatch">
</param>
      <param name="monsterAction">
</param>
      <param name="actionListfileName">
</param>
      <param name="faceFile">
</param>
    </member>
    <member name="M:dreamer.Monster.Draw">
      <summary>
Draw</summary>
    </member>
    <member name="M:dreamer.Monster.DrawArticleBlood">
      <summary>
Draw Blood</summary>
    </member>
    <member name="M:dreamer.Monster.DrawFace">
      <summary>
Draw Face</summary>
    </member>
    <member name="M:dreamer.Monster.Move(Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>
Move</summary>
      <param name="ks">
</param>
    </member>
    <member name="M:dreamer.Monster.Move(Microsoft.Xna.Framework.Input.KeyboardState,System.TimeSpan)">
      <param name="ks">
</param>
      <param name="gameTime">
</param>
    </member>
    <member name="T:dreamer.MySystem">
    </member>
    <member name="M:dreamer.MySystem.installFont">
    </member>
    <member name="T:dreamer.Person">
    </member>
    <member name="P:dreamer.Person.BloodNum">
    </member>
    <member name="E:dreamer.Person.OnNinjaDead">
      <summary>
Ninja Died Event</summary>
    </member>
    <member name="M:dreamer.Person.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
Constructor</summary>
      <param name="gd">
</param>
      <param name="spriteBatch">
</param>
      <param name="personAction">
</param>
      <param name="actionListfileName">
</param>
      <param name="faceFile">
</param>
    </member>
    <member name="M:dreamer.Person.Draw(dreamer.Direction)">
      <summary>
Draw</summary>
      <param name="direction">
</param>
    </member>
    <member name="M:dreamer.Person.DrawArticleBlood">
      <summary>
Draw Blood</summary>
    </member>
    <member name="M:dreamer.Person.DrawFace">
      <summary>
Draw person's face</summary>
    </member>
    <member name="M:dreamer.Person.Move(Microsoft.Xna.Framework.Input.KeyboardState)">
      <summary>
Move</summary>
      <param name="ks">
</param>
    </member>
    <member name="M:dreamer.Person.Move(Microsoft.Xna.Framework.Input.KeyboardState,System.TimeSpan)">
      <param name="ks">
</param>
      <param name="gameTime">
</param>
    </member>
    <member name="T:dreamer.Physics">
    </member>
    <member name="M:dreamer.Physics.IntersectPixels(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color[],Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color[])">
      <summary>
Determines if there is overlap of the non-transparent pixels between two sprites.</summary>
      <returns>
True if non-transparent pixels overlap; false otherwise</returns>
      <param name="rectangleA">
Bounding rectangle of the first sprite</param>
      <param name="dataA">
Pixel data of the first sprite</param>
      <param name="rectangleB">
Bouding rectangle of the second sprite</param>
      <param name="dataB">
Pixel data of the second sprite</param>
    </member>
    <member name="T:dreamer.Resource">
    </member>
    <member name="M:dreamer.Resource.AddTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <param name="gd">
</param>
      <param name="fileName">
</param>
    </member>
    <member name="M:dreamer.Resource.AddSong(Microsoft.Xna.Framework.Content.ContentManager,System.String)">
      <param name="cm">
</param>
      <param name="fileName">
</param>
    </member>
    <member name="M:dreamer.Resource.AddSounds(Microsoft.Xna.Framework.Content.ContentManager,System.String)">
      <param name="cm">
</param>
      <param name="fileName">
</param>
    </member>
    <member name="M:dreamer.Resource.AddFont(Microsoft.Xna.Framework.Content.ContentManager,System.String)">
      <param name="cm">
</param>
      <param name="fileName">
</param>
    </member>
  </members>
</doc>
